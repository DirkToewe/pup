/* Copyright 2016 Dirk Toewe
 *
 * This file is part of PUP.
 *
 * PUP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * PUP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with PUP. If not, see <http://www.gnu.org/licenses/>.
 */
<div style="z-index:1; position:absolute; background-color:transparent;">
  <table border="0">
    <tr>
      <td>
        <table border="0">
          <tr>
            <td>x:</td> <td> <select id="{div_id}/x"></select> </td>
          </tr>
          <tr>
            <td>y:</td> <td> <select id="{div_id}/y"></select> </td>
          </tr>
          <tr>
            <td>z:</td> <td> <select id="{div_id}/z"></select> </td>
          </tr>
        </table>
      </td>
      <td>
        color:
        <fieldset>
          <input  id="{div_id}/color_by_data" type="radio" name="color_method">
          <label for="{div_id}/color_by_data"> By Data</label><br>
          <input  id="{div_id}/color_uniform" type="radio" name="color_method">
          <label for="{div_id}/color_uniform"> Uniform</label><br>
          <input  id="{div_id}/color_value" type="color" value="#0000ff">
          <select id="{div_id}/color_data"></select>
        </fieldset>
      </td>
    </tr>
  </table>
</div>
<div id="{div_id}/graph" class="plotly-graph-div" style="width: {width}; height: {height}; z-index:0;">
</div>
<script type="text/javascript">
{{
  'use strict';
  window.PLOTLYENV=window.PLOTLYENV || {{}};
  window.PLOTLYENV.BASE_URL="' + plotly_platform_url + '";

  /* In order to reduce the file size, the DataFrame is stored as JSON-file
   * in a base64-encoded zip-archive. JSZip is used to extract it.
   */
  dataFrame = new JSZip().loadAsync( "{zDataFrame}", {{"base64": true}} )
    .then( zip => zip.file("/dataFrame.json").async("string") )
    .then( dataFrame => eval('('+dataFrame+')') );
  dataFrame.then( dataFrame => {{

    var
      {{ data, columns, index }} = dataFrame,
      layout = {jLayout},
      scatter3d = {{
        x: [], y: [], z: [],
        mode: 'markers',
        marker: {{
          size: 2,
          colorbar: {{
            title: '???',
            titleside: 'top'
          }},
          autocolorscale: true,
          showscale: true,
          cauto: true
        }},
        type: 'scatter3d'
      }};

    Plotly.newPlot("{div_id}/graph", [scatter3d], layout, {jConfig}).then(
      plot => {{

        var
          xAxis = document.getElementById('{div_id}/x'),
          yAxis = document.getElementById('{div_id}/y'),
          zAxis = document.getElementById('{div_id}/z'),
          color_by_data = document.getElementById('{div_id}/color_by_data'),
          color_uniform = document.getElementById('{div_id}/color_uniform'),
          color_data    = document.getElementById('{div_id}/color_data'),
          color_value   = document.getElementById('{div_id}/color_value');

        /* Called whenever the plotted data is changed, e.g. via the UI-elements.
         */
        function update_plot(event)
        {{
          if( color_by_data.checked )
          {{
            color_data .style.display='block';
            color_value.style.display='none';
            scatter3d.marker.color = data[color_data.value];
            scatter3d.marker.colorbar.title = color_data.value;
            scatter3d.marker.showscale = true;
          }} else {{
            color_data .style.display='none';
            color_value.style.display='block';
            scatter3d.marker.color = color_value.value;
            scatter3d.marker.showscale = false;
          }}

          layout.scene.xaxis.title = `x: ${{xAxis.value}}`;
          layout.scene.yaxis.title = `y: ${{yAxis.value}}`;
          layout.scene.zaxis.title = `z: ${{zAxis.value}}`;

          scatter3d.x = data[xAxis.value];
          scatter3d.y = data[yAxis.value];
          scatter3d.z = data[zAxis.value];

          delete plot.layout.scene.xaxis.type;
          delete plot.layout.scene.yaxis.type;
          delete plot.layout.scene.zaxis.type;

          Plotly.redraw(plot);
        }}
    
        color_by_data.checked = false;
        color_uniform.checked = true;

        [xAxis,yAxis,zAxis,color_data].forEach(
          axis => columns.forEach(
            column => {{
              var opt = document.createElement("option");
              opt.value = column;
              opt.text  = column;
              axis.add(opt);
            }}
          )
        );

        color_data.value = columns[2];
        xAxis.value = columns[0];
        yAxis.value = columns[1];
        zAxis.value = columns[columns.length-1];
        update_plot(null);

        color_by_data.addEventListener("click",  update_plot);
        color_uniform.addEventListener("click",  update_plot);
        [xAxis,yAxis,zAxis,color_data,color_value].forEach(
          input => input.addEventListener("change",update_plot)
        );

        /* Lazily load the text for the scatter plot's points.
         */
        new Promise( resolve => {{
          var
            row = new Array(columns.length+1),
            txt = new Array(index.length);
          index.forEach( (idx,iRow) => {{
            row[0] = `DataFrame idx: ${{idx}}`;
            columns.forEach( (col,iCol) =>
              row[iCol+1] = `${{col}}: ${{data[col][iRow]}}`
            );
            txt[iRow] = row.join('<br>');
          }});
          resolve(txt);
        }}).then( txt => {{
          scatter3d.text = txt;
          Plotly.redraw(plot);
        }});
      }}
    );
  }});
}}
</script>